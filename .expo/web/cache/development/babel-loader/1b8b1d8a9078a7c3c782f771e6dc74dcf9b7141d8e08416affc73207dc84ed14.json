{"ast":null,"code":"import _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn(this, result);\n  };\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nimport Platform from \"../Platform\";\nimport { CodedError } from \"./CodedError\";\nexport var UnavailabilityError = function (_CodedError) {\n  _inherits(UnavailabilityError, _CodedError);\n  var _super = _createSuper(UnavailabilityError);\n  function UnavailabilityError(moduleName, propertyName) {\n    _classCallCheck(this, UnavailabilityError);\n    return _super.call(this, 'ERR_UNAVAILABLE', \"The method or property \".concat(moduleName, \".\").concat(propertyName, \" is not available on \").concat(Platform.OS, \", are you sure you've linked all the native dependencies properly?\"));\n  }\n  return _createClass(UnavailabilityError);\n}(CodedError);","map":{"version":3,"names":["Platform","CodedError","UnavailabilityError","_CodedError","_inherits","_super","_createSuper","moduleName","propertyName","_classCallCheck","call","concat","OS","_createClass"],"sources":["C:\\Users\\Anirudh\\New folder\\amplify\\frontend\\node_modules\\expo-modules-core\\src\\errors\\UnavailabilityError.ts"],"sourcesContent":["import Platform from '../Platform';\nimport { CodedError } from './CodedError';\n\n/**\n * A class for errors to be thrown when a property is accessed which is\n * unavailable, unsupported, or not currently implemented on the running\n * platform.\n */\nexport class UnavailabilityError extends CodedError {\n  constructor(moduleName: string, propertyName: string) {\n    super(\n      'ERR_UNAVAILABLE',\n      `The method or property ${moduleName}.${propertyName} is not available on ${Platform.OS}, are you sure you've linked all the native dependencies properly?`\n    );\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,QAAQ;AACf,SAASC,UAAU;AAOnB,WAAaC,mBAAoB,aAAAC,WAAA;EAAAC,SAAA,CAAAF,mBAAA,EAAAC,WAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,mBAAA;EAC/B,SAAAA,oBAAYK,UAAkB,EAAEC,YAAoB;IAAAC,eAAA,OAAAP,mBAAA;IAAA,OAAAG,MAAA,CAAAK,IAAA,OAEhD,iBAAiB,4BAAAC,MAAA,CACSJ,UAAU,OAAAI,MAAA,CAAIH,YAAY,2BAAAG,MAAA,CAAwBX,QAAQ,CAACY,EAAE;EAE3F;EAAC,OAAAC,YAAA,CAAAX,mBAAA;AAAA,EANsCD,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}