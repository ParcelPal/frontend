{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar EventEmitter = function () {\n  function EventEmitter() {\n    (0, _classCallCheck2[\"default\"])(this, EventEmitter);\n    this._registry = {};\n  }\n  (0, _createClass2[\"default\"])(EventEmitter, [{\n    key: \"addListener\",\n    value: function addListener(eventType, listener, context) {\n      var registrations = allocate(this._registry, eventType);\n      var registration = {\n        context: context,\n        listener: listener,\n        remove: function remove() {\n          registrations[\"delete\"](registration);\n        }\n      };\n      registrations.add(registration);\n      return registration;\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(eventType) {\n      var registrations = this._registry[eventType];\n      if (registrations != null) {\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n        for (var _i = 0, _arr = (0, _toConsumableArray2[\"default\"])(registrations); _i < _arr.length; _i++) {\n          var registration = _arr[_i];\n          registration.listener.apply(registration.context, args);\n        }\n      }\n    }\n  }, {\n    key: \"removeAllListeners\",\n    value: function removeAllListeners(eventType) {\n      if (eventType == null) {\n        this._registry = {};\n      } else {\n        delete this._registry[eventType];\n      }\n    }\n  }, {\n    key: \"listenerCount\",\n    value: function listenerCount(eventType) {\n      var registrations = this._registry[eventType];\n      return registrations == null ? 0 : registrations.size;\n    }\n  }]);\n  return EventEmitter;\n}();\nexports[\"default\"] = EventEmitter;\nfunction allocate(registry, eventType) {\n  var registrations = registry[eventType];\n  if (registrations == null) {\n    registrations = new Set();\n    registry[eventType] = registrations;\n  }\n  return registrations;\n}","map":{"version":3,"names":["EventEmitter","_classCallCheck2","_registry","_createClass2","key","value","addListener","eventType","listener","context","registrations","allocate","registration","remove","add","emit","_len","arguments","length","args","Array","_key","_i","_arr","_toConsumableArray2","apply","removeAllListeners","listenerCount","size","exports","registry","Set"],"sources":["C:/Users/Anirudh/New folder/amplify/frontend/node_modules/react-native-web/dist/vendor/react-native/vendor/emitter/EventEmitter.js"],"sourcesContent":["/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n * @format\r\n */\r\n\r\n/**\r\n * EventEmitter manages listeners and publishes events to them.\r\n *\r\n * EventEmitter accepts a single type parameter that defines the valid events\r\n * and associated listener argument(s).\r\n *\r\n * @example\r\n *\r\n *   const emitter = new EventEmitter<{\r\n *     success: [number, string],\r\n *     error: [Error],\r\n *   }>();\r\n *\r\n *   emitter.on('success', (statusCode, responseText) => {...});\r\n *   emitter.emit('success', 200, '...');\r\n *\r\n *   emitter.on('error', error => {...});\r\n *   emitter.emit('error', new Error('Resource not found'));\r\n *\r\n */\r\nexport default class EventEmitter {\r\n  constructor() {\r\n    this._registry = {};\r\n  }\r\n  /**\r\n   * Registers a listener that is called when the supplied event is emitted.\r\n   * Returns a subscription that has a `remove` method to undo registration.\r\n   */\r\n  addListener(eventType, listener, context) {\r\n    var registrations = allocate(this._registry, eventType);\r\n    var registration = {\r\n      context,\r\n      listener,\r\n      remove() {\r\n        registrations.delete(registration);\r\n      }\r\n    };\r\n    registrations.add(registration);\r\n    return registration;\r\n  }\r\n\r\n  /**\r\n   * Emits the supplied event. Additional arguments supplied to `emit` will be\r\n   * passed through to each of the registered listeners.\r\n   *\r\n   * If a listener modifies the listeners registered for the same event, those\r\n   * changes will not be reflected in the current invocation of `emit`.\r\n   */\r\n  emit(eventType) {\r\n    var registrations = this._registry[eventType];\r\n    if (registrations != null) {\r\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\r\n        args[_key - 1] = arguments[_key];\r\n      }\r\n      for (var _i = 0, _arr = [...registrations]; _i < _arr.length; _i++) {\r\n        var registration = _arr[_i];\r\n        registration.listener.apply(registration.context, args);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes all registered listeners.\r\n   */\r\n  removeAllListeners(eventType) {\r\n    if (eventType == null) {\r\n      this._registry = {};\r\n    } else {\r\n      delete this._registry[eventType];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the number of registered listeners for the supplied event.\r\n   */\r\n  listenerCount(eventType) {\r\n    var registrations = this._registry[eventType];\r\n    return registrations == null ? 0 : registrations.size;\r\n  }\r\n}\r\nfunction allocate(registry, eventType) {\r\n  var registrations = registry[eventType];\r\n  if (registrations == null) {\r\n    registrations = new Set();\r\n    registry[eventType] = registrations;\r\n  }\r\n  return registrations;\r\n}"],"mappings":";;;;;;;;IA8BqBA,YAAY;EAC/B,SAAAA,aAAA,EAAc;IAAA,IAAAC,gBAAA,mBAAAD,YAAA;IACZ,IAAI,CAACE,SAAS,GAAG,CAAC,CAAC;EACrB;EAAC,IAAAC,aAAA,aAAAH,YAAA;IAAAI,GAAA;IAAAC,KAAA,EAKD,SAAAC,YAAYC,SAAS,EAAEC,QAAQ,EAAEC,OAAO,EAAE;MACxC,IAAIC,aAAa,GAAGC,QAAQ,CAAC,IAAI,CAACT,SAAS,EAAEK,SAAS,CAAC;MACvD,IAAIK,YAAY,GAAG;QACjBH,OAAO,EAAPA,OAAO;QACPD,QAAQ,EAARA,QAAQ;QACRK,MAAM,WAAAA,OAAA,EAAG;UACPH,aAAa,UAAO,CAACE,YAAY,CAAC;QACpC;MACF,CAAC;MACDF,aAAa,CAACI,GAAG,CAACF,YAAY,CAAC;MAC/B,OAAOA,YAAY;IACrB;EAAC;IAAAR,GAAA;IAAAC,KAAA,EASD,SAAAU,KAAKR,SAAS,EAAE;MACd,IAAIG,aAAa,GAAG,IAAI,CAACR,SAAS,CAACK,SAAS,CAAC;MAC7C,IAAIG,aAAa,IAAI,IAAI,EAAE;QACzB,KAAK,IAAIM,IAAI,GAAGC,SAAS,CAACC,MAAM,EAAEC,IAAI,GAAG,IAAIC,KAAK,CAACJ,IAAI,GAAG,CAAC,GAAGA,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC,EAAEK,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAGL,IAAI,EAAEK,IAAI,EAAE,EAAE;UAC1GF,IAAI,CAACE,IAAI,GAAG,CAAC,CAAC,GAAGJ,SAAS,CAACI,IAAI,CAAC;QAClC;QACA,KAAK,IAAIC,EAAE,GAAG,CAAC,EAAEC,IAAI,OAAAC,mBAAA,aAAOd,aAAa,CAAC,EAAEY,EAAE,GAAGC,IAAI,CAACL,MAAM,EAAEI,EAAE,EAAE,EAAE;UAClE,IAAIV,YAAY,GAAGW,IAAI,CAACD,EAAE,CAAC;UAC3BV,YAAY,CAACJ,QAAQ,CAACiB,KAAK,CAACb,YAAY,CAACH,OAAO,EAAEU,IAAI,CAAC;QACzD;MACF;IACF;EAAC;IAAAf,GAAA;IAAAC,KAAA,EAKD,SAAAqB,mBAAmBnB,SAAS,EAAE;MAC5B,IAAIA,SAAS,IAAI,IAAI,EAAE;QACrB,IAAI,CAACL,SAAS,GAAG,CAAC,CAAC;MACrB,CAAC,MAAM;QACL,OAAO,IAAI,CAACA,SAAS,CAACK,SAAS,CAAC;MAClC;IACF;EAAC;IAAAH,GAAA;IAAAC,KAAA,EAKD,SAAAsB,cAAcpB,SAAS,EAAE;MACvB,IAAIG,aAAa,GAAG,IAAI,CAACR,SAAS,CAACK,SAAS,CAAC;MAC7C,OAAOG,aAAa,IAAI,IAAI,GAAG,CAAC,GAAGA,aAAa,CAACkB,IAAI;IACvD;EAAC;EAAA,OAAA5B,YAAA;AAAA;AAAA6B,OAAA,cAAA7B,YAAA;AAEH,SAASW,QAAQA,CAACmB,QAAQ,EAAEvB,SAAS,EAAE;EACrC,IAAIG,aAAa,GAAGoB,QAAQ,CAACvB,SAAS,CAAC;EACvC,IAAIG,aAAa,IAAI,IAAI,EAAE;IACzBA,aAAa,GAAG,IAAIqB,GAAG,CAAC,CAAC;IACzBD,QAAQ,CAACvB,SAAS,CAAC,GAAGG,aAAa;EACrC;EACA,OAAOA,aAAa;AACtB"},"metadata":{},"sourceType":"script","externalDependencies":[]}